Lunes Tarde          - 8:30
martes madrugada     - 3:30
martes tarde         - 4 
miercoles madrugada  - 5
miercoles tarde      - 8:30
jueves madrugada     - 1:30 -> 31 horas
                            


HECHO - Separar los buffers de lectura de los buffers de escritura en dos archivos.

HECHO - Nueva organizacion de espacios

        space     -> inicia el espacio en tiempo de iniciacion (copilacion)

        spacefile -> Se inicia tanto en copilación como en ejecucion, muchos spacefile
        pueden tener por ejemplo un solo space.

        Rbuffer,Wbuffer -> Se inicia tanto en copilación (canales) + archivos permanentes
        tanto en ejecución , un spacefile puede tener muchos buferes que funcionan 
        en concurrencia y en paralelo ya que crean siempre nuevas referencias.

        Estos spacios sirven para poder organizarse en diferentes paquetes, se puede
        crear un paquete de iniciacion, diferentes paquetes donde se tengan los spacefile
        y luego otros paquetes en los que se resuelvan los spacefile con bufferes.

        Todo esto da simplicidad a la aplicación no necesitando hacer referencias a 
        otros paquetes.

        -TAMBIEN SE HA ELIMINADO NAME Y URL DE LAS FUNCIONES DE COPILACION, AHORA ESTAN EN
        SPACEFILE QUE SE GUARDA EN LOS MAPAS SUPERGLOBALES.

        -EL CAMPO NAME NO EXISTE ES UNA VARIABLE QUE SE INICIA EN TIEMPO DE EJECUCION, CREANDO
        UN NUEVO SPACEFILE. REUTILIZANDO DIR Y EXTENSION.


HECHO - Eliminar todas las funciones menos byte y bit

HECHO - Eliminar la funcion read onecolumn por ser redundante y no aportar 
        una mejora de rendimiento.
    EXPLICACION
    - La mejora de rendimiento vino por varios factores, ocultos cuando se hizo
    la funcion.
    - El uso de referencias en buffers evitando su copia, mejoro el rendimiento
    notablemente.
    - El uso de estructuras que den un valor de NIL no iniciadas, evitando
    el chequeo de mapas donde la busqueda sera falsa por defecto.
    - El uso de variables por referencia de mapas en vez del propio 
    mapa para hacer las cosas.

HECHO - Tirar error en el buffer de bytes de lectura si se piden varias lineas.



HECHO - Añadir postformat opcional en el buffer de lectura


HECHO - Implementacion de mapas sincronizados por ram
    Primer mapa string | int64
    - implementarlo en el buffer
    - sincronizacion de mapas para cualquier columna.
    - Que sean SUPERGLOBALES
    - Mover funciones de sincronizacion de ram a un archivo propio.


INDEXSIZEFIELD IMPORTANTE

    INDEXSIZEFIELD LECTURA POR RANGOS
    
    HECHO - 1 - Crear funcion de lectura de rangos para indexsizefield
    HECHO - 2 - Crear una funcion comun de lectura de rangos en el core
    HECHO - 3 - Usar esa funcion para dar soporte a todas las funciones de lectura. 

    IRREALIZABLE - 5 - Crear un funcion comun de lectura para indexsizecolumn

            4 - Optimizar todas las funciones de lectura.

                HECHO - Conversion a punteros para obtener el tercer estado NIL.
                HECHO - Corregido CheckFileTypeBuffer en las funciones de lectura.
                HECHO - Añadir otimizacion de si se ha creado el puntero, y crear un puntero solo
                        si es un canal.
                HECHO - Ahora los bufferes field crean un puntero mientras, que la funcion de lectura administra el tamaño.
                HECHO - Partir la funcion brspace en funciones mas pequeñas para iniciar la estructura.
                HECHO - Si es nil haz algo si no continua.
                HECHO - Precalcular campos que no necesitan ser calculados mas de una vez.
                HECHO - posibles errores.
                HECHO - bufferes de las columnas.

                HECHO - quitar -2 buf line funcion de lectura.
                IRREALIZABLE - Añadir contabilizador atomico de bits
               HECHO - Añadir multicolumnas a la lista de bits LECTURA
                     - Añadir multicolumnas a la lista de bits ESCRITURA
                IRREALIZABLE - revisar el calculo de sizeline bit


            IRREALIZABLE - OPTIMIZAR READ LINEBIT
                Podria hacer una trampa y añadir un bucle
                Si linebit es 1 Compruebo el dos y sumo 1 a buff.line
                y cuando sea 7 romper esa optimizacion y que continue con el primer bucle de leer el byte del archivo

            HECHO - Migrar a la nueva funcion trim en el core.

    INDEXSIZEFIELD ESCRITURA POR RANGOS Y OPTIMIZACION

        HECHO - REvisar envio de nulos a la funcion de escritura para borrar
        HECHO - Tres estados de line para verificar si la escritura va ser por columnas o por fields
        HECHO - Tres estados de rangue para verficar si la escritura va ser por columnas o por fields
         HECHO  - Añadir soporte para check

        HECHO - Soporte para escritura por rangos 
        HECHO - Nuevo buffer fieldBuffer
        HECHO - Planteamiento hecho falta crear la funcion que acepte rango y actualizar los tres buffers y la 
        funcion de escritura de bits, unificando todo.

        HECHO - Crear la funcion de escribir por rangos o escribir sin rangos de forma dinamica.

        HECHO - Separar las funciones de buffbytes , buffchan , buffmap y añadir las funciones de agregar
        linea, agregar rangos... etc

        HECHO - Dos funciones de enviar datos por canal una para rangos y otra para lineas usando la misma estructura
        y ademas compatibles entre si.

        HECHO - Eliminar -2 en agregar fields.
        HECHO - Eliminar -1 y crear una funcion de nueva linea que abstraiga del concepto de enviar linea -1.

        HECHO - Añadir a writeBitSpace buffer de bytes, bufferchan y soporte para fields por rangos en todas sus
        variaciones

HECHO - Migracion global a bytes nulos en vez de espacios.
HECHO -  Ver como se va a gestionar la creacion de carpetas para los archivos en los spacios.
HECHO - SubPaquete que gestione log y errores, usando el sistema dac.
HECHO - Añadir archivo de log de inicio de todos los archivos , 
HECHO          - Crear todos los errores del paquete
HECHO - Añadir precalcular campos poniendo el tamañao en un array, tanto para indexsizefield como indexsizecolumn


ACTUAL - Configurar todos los errores de la aplicación



IDEA          - Soporte para truncar archivos cuando se copilan como vaciar errores
IDEA          - Funciones para gestionar los mapas globales

FUNCIONALIDAD - Crear las funciones de borrado de archivos, directorios, subdirectorios.

FUNCIONALIDAD - Que abstraiga de crear un buffer de bit que sea on y off, y lo cree automaticamente.

IDEA - Leer campo y escribir en el como sumar un numero.ç
IDEA - Funcion que escriba espacios al final
IDEA - Funcion que escriba saltos de linea al final

IDEA - SubPaquete para gestionar indexsizefields dinamicos en tiempo de ejecución.

IDEA - SubPaquete que envuelva las funciones de lectura para tipar los resultados.

IDEA - Añadir versiones a los archivos, de tal modo que se pueda Añadir modificaciones, sin tener que actualizar 
        si no actualizacion por uso, cuando se usa se modifica directamente a la siguiente version.



IDEA - SubPaquete funciones que muestren los datos para iniciar un space o un file en cualquier otro servidor
        cuando se detecte la extension dacbyte o dacbit, el servidor podra pedir los datos del space para recrearlo.
     - crear funcion que pueda recrear un spacio desde un archivo.

IDEA - SubPaquete Tunelizacion de archivo:
            Usar el preformate y el postformat para crear un flujo o analisis de datos de archivos.

                Ejemplo 1
                preformat -> archivo1 -> postformat -> preformat -> archivo2 -> postformat.

                Ejemplo2
                        preformat -> archivo1 -> postformat
                        preformat -> archivo2 -> postformat
                        preformat -> archivo3 -> postformat
                          archivo1 ,archivo2 ,archivo3 -> preformat -> archivo4 -> postformat.

IDEA - Añadir funciones de copiar un espacio en un nuevo espacio con mas columnas , mas fields o eliminando
columnas o campos de manera mas facil y rapida, y haciendo un rename al final.

IDEA - Añadir funciones de busqueda de archivos y listado de archivos en spacio, para operar en muchos ficheros
como crear grandes actualizaciones por ejemplo o analisis de datos , o entrenar IA.

OPTIMIZACION - Rescribir las variables publicas, quitando las variables que no necesariamente se necesiten
                ser accesibles fuera del paquete.
