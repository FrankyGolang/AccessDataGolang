HECHO - Separar los buffers de lectura de los buffers de escritura en dos archivos.

HECHO - Nueva organizacion de espacios

        space     -> inicia el espacio en tiempo de iniciacion (copilacion)

        spacefile -> Se inicia tanto en copilación como en ejecucion, muchos spacefile
        pueden tener por ejemplo un solo space.

        Rbuffer,Wbuffer -> Se inicia tanto en copilación (canales) + archivos permanentes
        tanto en ejecución , un spacefile puede tener muchos buferes que funcionan 
        en concurrencia y en paralelo ya que crean siempre nuevas referencias.

        Estos spacios sirven para poder organizarse en diferentes paquetes, se puede
        crear un paquete de iniciacion, diferentes paquetes donde se tengan los spacefile
        y luego otros paquetes en los que se resuelvan los spacefile con bufferes.

        Todo esto da simplicidad a la aplicación no necesitando hacer referencias a 
        otros paquetes.

        -TAMBIEN SE HA ELIMINADO NAME Y URL DE LAS FUNCIONES DE COPILACION, AHORA ESTAN EN
        SPACEFILE QUE SE GUARDA EN LOS MAPAS SUPERGLOBALES.

        -EL CAMPO NAME NO EXISTE ES UNA VARIABLE QUE SE INICIA EN TIEMPO DE EJECUCION, CREANDO
        UN NUEVO SPACEFILE. REUTILIZANDO DIR Y EXTENSION.


HECHO - Eliminar todas las funciones menos byte y bit

HECHO - Eliminar la funcion read onecolumn por ser redundante y no aportar 
        una mejora de rendimiento.
    EXPLICACION
    - La mejora de rendimiento vino por varios factores, ocultos cuando se hizo
    la funcion.
    - El uso de referencias en buffers evitando su copia, mejoro el rendimiento
    notablemente.
    - El uso de estructuras que den un valor de NIL no iniciadas, evitando
    el chequeo de mapas donde la busqueda sera falsa por defecto.
    - El uso de variables por referencia de mapas en vez del propio 
    mapa para hacer las cosas.

HECHO - Tirar error en el buffer de bytes de lectura si se piden varias lineas.



HECHO - Añadir postformat opcional en el buffer de lectura


HECHO - Implementacion de mapas sincronizados por ram
    Primer mapa string | int64
    - implementarlo en el buffer
    - sincronizacion de mapas para cualquier columna.
    - Que sean SUPERGLOBALES
    - Mover funciones de sincronizacion de ram a un archivo propio.


    INDEXSIZEFIELD IMPORTANTE

    HECHO - 1 - Crear funcion de lectura de rangos para indexsizefield
    HECHO - 2 - Crear una funcion comun de lectura de rangos en el core
        
            3 - Usar esa funcion para dar soporte a todas las funciones de lectura. (FALTA BITS)

            5 - Crear un funcion comun de lectura para indexsizecolumn
            4 - Optimizar todas las funciones de lectura.
                REVISAR - Si es nil haz algo si no continua.
                REVISAR - Precalcular campos que no necesitan ser calculados mas de una vez.
                REVISAR - posibles errores.
            5 - Migrar a la nueva funcion trim en el core.

            6 - Migracion global a bytes nulos en vez de espacios.


FUNCIONALIDAD - Soporte para escritura por rangos 



OPTIMIZACION - Rescribir las variables publicas, quitando las variables que no necesariamente se necesiten
                ser accesibles fuera del paquete.

IDEA - SubPaquete para gestionar indexsizefields dinamicos en tiempo de ejecución.
IDEA - SubPaquete que envuelva las funciones de lectura para tipar los resultados.
IDEA - Añadir versiones a los archivos, de tal modo que se pueda Añadir modificaciones, sin tener que actualizar 
        si no actualizacion por uso, cuando se usa se modifica directamente a la siguiente version.

IDEA - SubPaquete que gestione log y errores, usando el sistema dac.
        Añadir archivo de log de inicio de todos los archivos , seguimiento de errores y demas..

IDEA - SubPaquete funciones que muestren los datos para iniciar un space o un file en cualquier otro servidor
        cuando se detecte la extension dacbyte o dacbit, el servidor podra pedir los datos del space para recrearlo.
     - crear funcion que pueda recrear un spacio desde un archivo.


